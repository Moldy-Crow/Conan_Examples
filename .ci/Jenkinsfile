ART_URL = 'https://conanv2beta.jfrog.io/artifactory/api/conan/conan'

void cancelPrevious() {
    stage("Cancelling previous") {
        def buildNumber = env.BUILD_NUMBER as int
        if (buildNumber > 1) milestone(buildNumber - 1)
        milestone(buildNumber)
    }
}

LINUX_CONTAINER = 'conanio/gcc10'

def envInside(Map ctxt, Closure closure) {
    String venvDirectory = isUnix() ? "${pwd()}/conanenv" : "${pwd()}\\conanenv"
    String binPath = isUnix() ? "$venvDirectory/bin/" : "$venvDirectory\\Scripts\\"
    String conanHome = isUnix() ? "${pwd()}/.conan" : "${pwd()}\\.conan"
    withEnv(["PATH+EXTRA=${binPath}", "CONAN_HOME=${conanHome}"]) {
        // This doesn't work if running docker.inside (https://issues.jenkins.io/browse/JENKINS-49076)
        closure()
    }
}

def envCreate(Map ctxt) {
    String venvDirectory = isUnix() ? "${pwd()}/conanenv" : "${pwd()}\\conanenv"
    String binPath = isUnix() ? "$venvDirectory/bin/" : "$venvDirectory\\Scripts\\"
    ctxt.shFunction("${ctxt.python_host} --version")
    if (ctxt.isInsideDocker) {
        // Alternate implementation because of https://issues.jenkins.io/browse/JENKINS-49076
        // Always install latest pre-release
        ctxt.shFunction("pip install ${ctxt.branch.branchInstall} --upgrade")
    }
    else {
        ctxt.shFunction("${ctxt.python_host} -m venv $venvDirectory")
        ctxt.shFunction("${binPath}python -m pip install -U pip")
        // Always install latest pre-release
        ctxt.shFunction("${binPath}python -m pip install ${ctxt.branch.branchInstall} --upgrade")
    }
}

String pipConanBranchInstall(String branch, String fork='conan-io') {
    return "-e git+https://github.com/${fork}/conan.git@${branch}#egg=conan"
}

// Run on develop2 and latest alpha
List<Map> getBranchesInstalls() {
    def branches = [['name': 'latest Conan 2.0-alpha', 'branchInstall': 'conan --pre']]
    branches.add(0, ['name': 'develop Conan 2.0', 'branchInstall': pipConanBranchInstall('develop2')])
    return branches
}

def runExample(Map ctxt, String example) {
    for (extension in ctxt.extensions) {
        if (example.contains(extension)) {
            def command = example.contains(".py") ? "python ${example}" : "${example}"
            ctxt.shFunction(command)
        }
    }
}

def runExamples(Map ctxt) {
    try {
        checkout scm

        envCreate(ctxt)
        envInside(ctxt) {
            ctxt.shFunction('cmake --version')
            ctxt.shFunction('conan --version')
        }

        envInside(ctxt) {
            ctxt.shFunction('conan profile detect --force')
            ctxt.shFunction('conan remote remove conancenter')
            ctxt.shFunction("conan remote add conancenterv2 ${ART_URL}")
            for (example in ctxt.examples) {
                runExample(ctxt, example)
            }
        }
    }
    finally {
        cleanWs(cleanWhenAborted: true, cleanWhenFailure: true, cleanWhenNotBuilt: true,
                cleanWhenSuccess: true, cleanWhenUnstable: true, disableDeferredWipeout: true, deleteDirs: true,
                notFailBuild: true)
    }
}

node('Linux') {
    
    cancelPrevious() 
    
    List<String> examples = []
    stage('Find examples') {
        checkout scm
        def _examples = sh(script: 'find . -name run_example.*', returnStdout: true).readLines()
        for (example in _examples) {
            if (example.contains(".sh") || example.contains(".bat") || example.contains(".py")) {
                examples.add(example)
            }
        }
    }

    stage('Run examples') {
        def conanBranchesInstalls = getBranchesInstalls()
        parallel(
            linux: {
                conanBranchesInstalls.each { branch ->
                    stage("${branch.name}: Run Linux examples") {
                        docker.image(LINUX_CONTAINER).inside {
                            runExamples([python_host: 'python3',
                                        shFunction: { data -> sh(data) },
                                        isInsideDocker: true,
                                        examples: examples,
                                        branch: branch,
                                        extensions: ['.py', '.sh']])
                        }
                    }
                }
            },
            macos: {
                 node('Macos') {
                    conanBranchesInstalls.each { branch ->
                        stage("${branch.name}: Run Macos examples") {
                            withEnv(['PATH+EXTRA=/usr/local/bin']) { // Required to find CMake
                                runExamples([python_host: 'python3',
                                            shFunction: { data -> sh(data) },
                                            isInsideDocker: false,
                                            examples: examples,
                                            branch: branch,
                                            extensions: ['.py', '.sh']])
                            }
                        }
                    }
                 }
             },
             windows: {
                 node('Windows') {
                    conanBranchesInstalls.each { branch ->
                        stage("${branch.name}: Run Windows examples") {
                            runExamples([python_host: 'C:\\Python39\\python.exe',
                                        shFunction: { data -> bat(data) },
                                        isInsideDocker: false,
                                        examples: examples,
                                        branch: branch,
                                        extensions: ['.py', '.bat']])
                        }
                    }
                 }
             }
        )
    }
}
